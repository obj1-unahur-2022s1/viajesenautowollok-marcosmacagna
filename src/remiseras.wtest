/*
 * Test: Tené en cuenta intentar no mezclar en los test objetos que no estar relacionados
 * Ej: en el test 10 kms con cada remisera lo ideal seria hacerlos independietnes para roxana, gabriela, marilea y juano
 * y no hacer todos juntos en un único test
 */

import remiseras.*
import clientes.*
import oficina.*

test "Viaje de 10 kms con cada remisera" {
	
	assert.equals(180, roxana.precioViaje(ludmila, 10))
	assert.equals(300, roxana.precioViaje(anaMaria, 10))
	assert.equals(220, roxana.precioViaje(teresa, 10))
	
	assert.equals(216, gabriela.precioViaje(ludmila, 10))
	assert.equals(360, gabriela.precioViaje(anaMaria, 10))
	assert.equals(264, gabriela.precioViaje(teresa, 10))
	
	assert.equals(180, mariela.precioViaje(ludmila, 10))
	assert.equals(300, mariela.precioViaje(anaMaria, 10))
	assert.equals(220, mariela.precioViaje(teresa, 10))
	
	assert.equals(200, juana.precioViaje(ludmila, 10))
	assert.equals(200, juana.precioViaje(anaMaria, 10))
	assert.equals(200, juana.precioViaje(teresa, 10))

}

test "Viaje de 2 kms con cada remisera" {
	
	assert.equals(36, roxana.precioViaje(ludmila, 2))
	assert.equals(60, roxana.precioViaje(anaMaria, 2))
	assert.equals(44, roxana.precioViaje(teresa, 2))
	
	assert.equals(43.20, gabriela.precioViaje(ludmila, 2))
	assert.equals(72, gabriela.precioViaje(anaMaria, 2))
	assert.equals(52.80, gabriela.precioViaje(teresa, 2))
	
	assert.equals(50, mariela.precioViaje(ludmila, 2))
	assert.equals(60, mariela.precioViaje(anaMaria, 2))
	assert.equals(50, mariela.precioViaje(teresa, 2))
	
	assert.equals(100, juana.precioViaje(ludmila, 2))
	assert.equals(100, juana.precioViaje(anaMaria, 2))
	assert.equals(100, juana.precioViaje(teresa, 2))
}

test "Cambia el valor del viaje de teresa" {
	
	teresa.valorViaje(50)
	
	assert.equals(50, teresa.valorViaje())
}

test "Cambia la economia de anaMaria" {
	
	assert.that(anaMaria.economiaEstable())
	
	anaMaria.cambiarEconomiaEstable()
	
	assert.notThat(anaMaria.economiaEstable())
}

test "Lucia reemplaza a Mariela y Melina trabaja para Ludmila, por un viaje de
	  10 kms y otro de 1 km" {
	
	lucia.reemplazaA(mariela)
	melina.trabajaPara(ludmila)
	
	assert.equals(150, lucia.precioViaje(melina,10))
	assert.equals(50, lucia.precioViaje(melina,1))
}

test "Lucia reemplaza a Gabriela y Melina trabaja para Ludmila, por un viaje de
	  10 kms y otro de 1 km" {
	
	lucia.reemplazaA(gabriela)
	melina.trabajaPara(ludmila)
	
	assert.equals(180, lucia.precioViaje(melina,10))
	assert.equals(18, lucia.precioViaje(melina,1))		  	
}

test "Roxana remisera de primera opcion y Juana remisera de segunda opcion,
      para un viaje de 10 kms para anaMaria" {
	
	oficina.asignarRemiseras(roxana, juana)
	
	assert.equals(juana, oficina.remiseraElegidaParaViaje(anaMaria, 10))
	assert.equals(200, juana.precioViaje(anaMaria, 10))
	assert.equals(300, roxana.precioViaje(anaMaria, 10))
	assert.that(oficina.diferenciaDePrecios(anaMaria, 10) > 30)	
}

test "Roxana remisera de primera opcion y Juana remisera de segunda opcion,
      para un viaje de 10 kms para Teresa" {
      	
	oficina.asignarRemiseras(roxana, juana)
	
	assert.equals(220, roxana.precioViaje(teresa, 10))
	assert.equals(200, juana.precioViaje(teresa, 10))
	assert.that(oficina.segundaRemiseraMenorPrecioPrimeraRemisera(teresa, 10))
	assert.that(oficina.diferenciaDePrecios(teresa, 10) < 30)
	assert.equals(roxana, oficina.remiseraElegidaParaViaje(teresa, 10))	
}

test "Roxana remisera de primera opcion y Juana remisera de segunda opcion,
      para un viaje de 4 kms para Teresa" {
	
	oficina.asignarRemiseras(roxana, juana)
	
	assert.equals(88, roxana.precioViaje(teresa, 4))
	assert.equals(100, juana.precioViaje(teresa, 4))
	assert.notThat(oficina.segundaRemiseraMenorPrecioPrimeraRemisera(teresa, 4))
	assert.equals(roxana, oficina.remiseraElegidaParaViaje(teresa, 4))
}

test "Cambia la primera remisera" {
	
	oficina.asignarRemiseras(roxana, juana)
	oficina.cambiarPrimeraRemiserarPor(gabriela)
	
	assert.equals(gabriela, oficina.primeraRemisera())
}

test "Cambia la segunda remisera" {
	
	oficina.asignarRemiseras(roxana, juana)
	oficina.cambiarSegundaRemiseraPor(gabriela)
	
	assert.equals(gabriela, oficina.segundaRemisera())
}

test "Intercambia primera remisera y segunda" {
	
	oficina.asignarRemiseras(roxana, juana)
	oficina.intercambiarRemiseras()
	
	assert.equals(juana, oficina.primeraRemisera())
	assert.equals(roxana, oficina.segundaRemisera())
}